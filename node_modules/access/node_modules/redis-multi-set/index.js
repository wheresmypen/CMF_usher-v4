var util = require('util')
  , format = util.format.bind(util)
  , keyformat = 'multiset_%s'

/**
 * Return a new MultiSet
 *
 * @param {Object} node_redis client
 * @return {Object}
 * @api public
 */
module.exports = function (client) {
  return new MultiSet(client)
}

/**
 * Constructor
 */
function MultiSet (client) { 
  this.db = client
}

/**
 * Add an array or arrays to a set
 *
 * @param {String} key
 * @param {Array} members
 * @param {Function} cb
 * @api public
 */
MultiSet.prototype.add =
MultiSet.prototype.sadd = function (key, members, cb) {
  if (!Array.isArray(members)) 
    throw new Error('an array or multidimensional array is required')
  if (!Array.isArray(members[0])) members = [ members ]
  this.db.sadd(format(keyformat, key), members.map(JSON.stringify), cb)
}

/**
 * Return a set as a multidimensional array
 *
 * @param {String} key
 * @param {Function} cb
 * @api public
 */
MultiSet.prototype.get =
MultiSet.prototype.members =
MultiSet.prototype.smembers = function (key, cb) {
  this.db.smembers(format(keyformat, key), function (error, array) {
    if (error) return cb(error)
    if (!array.length) return cb(null, array)
    return cb(null, array.map(JSON.parse))
  })
}

/**
 * Remove a member from a set
 *
 * @param {String} key
 * @param {Array} member
 * @param {Function} cb
 * @api public
 */
MultiSet.prototype.remove =
MultiSet.prototype.srem = function (key, member, cb) {
  if (!Array.isArray(member)) 
    throw new Error('multiset members are arrays, not ' + typeof member)
  this.db.srem(format(keyformat, key), JSON.stringify(member), cb)
}

/**
 * Delete an entire set
 *
 * @param {String} key
 * @param {Function} cb
 * @api public
 */
MultiSet.prototype.delete = function (key, cb) {
  this.db.del(format(keyformat, key), cb)
}
