var test = require('tap').test
var client = require('redis').createClient()
var multiSet = require('../')(client)
var data = [ [ 0, 1, 2, 3, 4 ], [ 5, 6, 7, 8, 9 ] ]

test('multiSet.add', function (t) {
  t.plan(2)
  multiSet.add('test', data, function (error, result) {
    t.notok(error, 'error should be falsy')
    t.deepEqual(result, 2, 'result should indicate two additions')
  })
})

test('multiSet.get', function (t) {
  t.plan(2)
  multiSet.get('test', function (error, result) {
    t.notok(error, 'error should be falsy')
    t.deepEqual(result.sort(), data.sort(), 'result should be equal to `data`')
  })
})

test('multiSet.remove', function (t) {
  t.plan(4)
  multiSet.remove('test', data[0], function (error, result) {
    t.notok(error, 'error should be falsy')
    t.deepEqual(result, 1, 'result should indicate one removal')
  })
  multiSet.remove('test', data[1], function (error, result) {
    t.notok(error, 'error should be falsy')
    t.deepEqual(result, 1, 'result should indicate one removal')
  })
})

test('close redis connection', function (t) {
  client.end()
  t.end()
})
