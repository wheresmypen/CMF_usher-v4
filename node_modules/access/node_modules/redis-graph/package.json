{
  "name": "redis-graph",
  "version": "0.2.3",
  "description": "a graph database using redis sets",
  "main": "index.js",
  "bin": {},
  "directories": {
    "test": "test"
  },
  "dependencies": {},
  "devDependencies": {
    "redis": "0.7.2",
    "tap": "~0.2.5"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tblobaum/redis-graph.git"
  },
  "homepage": "https://github.com/tblobaum/redis-graph",
  "keywords": [
    "redis",
    "graph",
    "edge",
    "node"
  ],
  "author": {
    "name": "Thomas Blobaum",
    "email": "tblobaum@gmail.com",
    "url": "https://github.com/tblobaum/"
  },
  "license": "MIT",
  "readme": "# redis-graph\n\na powerful graph implementation using [redis sets](http://redis.io/commands#set)\n\n[![Build Status](https://secure.travis-ci.org/tblobaum/redis-graph.png)](http://travis-ci.org/tblobaum/redis-graph)\n\n# Methods\n\n`redis-graph` uses an instance of `node_redis` to connect to redis with\n\n``` js\n\nvar Node = require('redis-graph')\nNode.setClient(require('redis').createClient())\n\n```\n\n## Node(id [, opts])\nreturn a new `node` \n\nAn options argument with `inner` and `outer` properties can be passed as the second argument, which will be used for the inner/outer edges for the node. \n\n`inner` defaults to `'membership'` and `'outer'` defaults to `'members'`\n\nThe defaults are suitable for a graph of groups. These edge names could be something else, e.g. `'followers'` and `'following'` to mimic twitter's social graph.\n\nNote: The `nodes` argument to all api calls below can either be a string id (e.g. `'user'`), an array of ids (e.g. `[ 'user', 'admin' ]`), an instance of `Node` or an array of instances of `Node`\n\n\n``` js\n\nvar Node = require('redis-graph')\nNode.setClient(require('redis').createClient())\n\nvar myGroup = Node('me')\n  , yourGroup = Node('you')\n  , adminGroup = Node('admin')\n  , userGroup = Node('user')\n\nuserGroup.members.add('me', function (error) {\n  userGroup.members.add('you', function (erro) {\n    myGroup.members.add('you', function (err) {\n      yourGroup.members.add('me', function (er) {\n        adminGroup.members.add('you', function (e) {\n          // do something with the connections\n          // ..\n\n        })\n      })\n    })\n  })\n})\n\n```\n\n## .{members,membership}.add(nodes, function (error) { ... })\nadd an edge or edges to `nodes` from this instance\n\n``` js\nNode('user').members.add('me', function (error) {\n  // ..\n})\n\n// is exactly the same as\nNode('me').membership.add('user', function (error) {\n  // ..\n})\n```\n\n## .{members,membership}.has(node, function (error, hasNode) { ... })\nchecks wether not this instance has an edge to `node`\n\n``` js\nNode('user').members.has('me', function (error, hasUser) {\n  // hasUser == true || hasUser == false\n})\n```\n\n## .{members,membership}.all(function (error, nodes) { ... })\nreturn a list of nodes\n\n``` js\nNode('user').members.all(function (err, nodes) {\n  console.log(nodes)\n  // => [ 'me' ]\n})\n\nNode('me').membership.all(function (err, nodes) {\n  console.log(nodes)\n  // => [ 'user' ]\n})\n```\n\n## .{members,membership}.delete(nodes, function (error) { ... })\nremove an edge or edges from `nodes` to this instance\n\n``` js\nNode('user').members.delete('me', function (err, nodes) {\n  console.log(nodes)\n  // => [ 'me' ]\n})\n\n// is exactly the same as\nNode('me').membership.delete('user', function (err, nodes) {\n  console.log(nodes)\n  // => [ 'user' ]\n})\n```\n\n## .{members,membership}.union(nodes, function (error, nodes) { ... })\nreturn a union of the edges with the `nodes` edges provided with logical `||`\n\n``` js\nNode('you').membership.union('me', function (e, nodes) {\n  // do something with the list of memberships either 'you' || 'me' have\n  // ..\n})\n\nNode('user').members.union('admin', function (e, nodes) {\n  // do something with the members of 'user' and 'admin'\n  // ..\n})\n```\n\n## .{members,membership}.intersect(nodes, function (error, nodes) { ... })\nreturn an intersection of the edges with the `nodes` edges provided, with logical `&&`\n\n``` js\nNode('you').membership.intersect('me', function (e, nodes) {\n  // do something with the list of memberships both 'you' && 'me' have\n  // ..\n})\n```\n\n## .{members,membership}.without(nodes, function (error, nodes) { ... })\nreturn the result of a subtraction of the `nodes` edges from the instance's edges\n\n``` js\nNode('you').membership.without('me', function (e, nodes) {\n  // do something with the list of memberships 'you' have that 'me' does not have\n  // ..\n})\n```\n\n## .{members,membership}.{members,membership}(function (error, nodes) { ... })\nreturn the nodes of the edges we have edges to! (similar to `all`, but another level deep)\n\n``` js\nNode('you').membership.membership(function (e, nodes) {\n  // do something with a list of nodes that have membership to the nodes that i have membership to\n  // ..\n})\n\nNode('you').membership.members(function (e, nodes) {\n  // do something with a list of nodes that are members of the nodes that i have membership to\n  // ..\n})\n```\n\n## .toString(function (error) { ... })\nreturn the string id of this instance\n\n``` js\nNode('user').toString()\n// => 'user'\n\n```\n\n## .delete(function (error) { ... })\ndelete this instance and remove all of its edges from redis\n\n``` js\nNode('user').delete(function (err) {\n  // ..\n\n})\n```\n\n# Example\n\nCheck the examples directory for more stuff.\n\n``` js\nvar Node = require('./')\nNode.setClient(require('redis').createClient())\n\nvar myGroup = Node('me', { inner : 'membership', outer : 'members' })\nvar yourGroup = Node('you', { inner : 'membership', outer : 'members' })\nvar adminGroup = Node('admin', { inner : 'membership', outer : 'members' })\nvar userGroup = Node('user', { inner : 'membership', outer : 'members' })\n\nuserGroup.members.add('me', function (err) {\n  userGroup.members.add('you', function (err) {\n    myGroup.members.add('you', function (err) {\n      yourGroup.members.add('me', function (err) {\n        adminGroup.members.add('you', function (e) {\n\n          // \n          // Members\n          // - having a member\n          // \n\n          userGroup.members.all(function (e, nodes) {\n            console.log('err', e)\n            console.log('members of \"user\":', nodes)\n            // => [ 'you', 'me' ]\n          })\n\n          myGroup.members.all(function (e, nodes) {\n            console.log('err', e)\n            console.log('members of \"me\":', nodes)\n            // => [ 'you' ]\n          })\n\n          yourGroup.members.all(function (e, nodes) {\n            console.log('err', e)\n            console.log('members of \"you\":', nodes)\n            // => [ 'me' ]\n          })\n\n          adminGroup.members.all(function (e, nodes) {\n            console.log('err', e)\n            console.log('members of \"admin\":', nodes)\n            // => [ 'you' ]\n          })\n\n          userGroup.members.union('admin', function (e, nodes) {\n            console.log('err', e)\n            console.log('members of \"user\" || \"admin\":', nodes)\n            // => [ 'you', 'me' ]\n          })\n\n          userGroup.members.intersect('admin', function (e, nodes) {\n            console.log('err', e)\n            console.log('members of both \"user\" && \"admin\":', nodes)\n            // => [ 'you' ]\n          })\n\n          userGroup.members.without('admin', function (e, nodes) {\n            console.log('err', e)\n            console.log('members of \"user\" without members of \"admin\":', nodes)\n            // => [ 'me' ]\n          })\n\n          userGroup.members.members(function (e, nodes) {\n            console.log('err', e)\n            console.log('members of the members of \"user\":', nodes)\n            // => [ 'you', 'me' ]\n          })\n\n          userGroup.members.membership(function (e, nodes) {\n            console.log('err', e)\n            console.log('membership of the members of \"user\":', nodes)\n            // => [ 'user', 'you', 'admin', 'me' ]\n          })\n\n          // \n          // Membership\n          // - being a member\n          // \n\n          userGroup.membership.all(function (e, nodes) {\n            console.log('err', e)\n            console.log('membership of \"user\":', nodes)\n            // => [ ]\n          })\n\n          myGroup.membership.all(function (e, nodes) {\n            console.log('err', e)\n            console.log('membership of \"me\":', nodes)\n            // => [ 'user', 'you' ]\n          })\n\n          yourGroup.membership.all(function (e, nodes) {\n            console.log('err', e)\n            console.log('membership of \"you\":', nodes)\n            // => [ 'user', 'admin', 'me' ]\n          })\n\n          adminGroup.membership.all(function (e, nodes) {\n            console.log('err', e)\n            console.log('membership of \"admin\":', nodes)\n            // => [ ]\n          })\n\n          yourGroup.membership.union('me', function (e, nodes) {\n            console.log('err', e)\n            console.log('membership of either \"you\" || \"me\":', nodes)\n            // => [ 'user', 'you', 'me', 'admin' ]\n          })\n\n          yourGroup.membership.intersect('me', function (e, nodes) {\n            console.log('err', e)\n            console.log('membership of \"you\" && \"me\":', nodes)\n            // => [ 'user' ]\n          })\n\n          yourGroup.membership.without('me', function (e, nodes) {\n            console.log('err', e)\n            console.log('membership of \"you\" without \"me\":', nodes)\n            // => [ 'me', 'admin' ]\n          })\n\n          yourGroup.membership.membership(function (e, nodes) {\n            console.log('err', e)\n            console.log('membership of the membership of \"you\":', nodes)\n            // => [ 'user', 'you' ]\n          })\n\n          yourGroup.membership.members(function (e, nodes) {\n            console.log('err', e)\n            console.log('members of the membership of \"you\":', nodes)\n            // => [ 'you', 'me' ]\n          })\n\n        })\n      })\n    })\n  })\n})\n\n```\n\n# Install\n\n`npm install redis-graph`\n\n# Tests\n\nWith redis running locally do:\n\n`npm install -g tap && npm test`\n\n# License\n\n(The MIT License)\n\nCopyright (c) 2012 Thomas Blobaum <tblobaum@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "redis-graph@0.2.3",
  "dist": {
    "shasum": "79b03e7290acaafd1448e258491a14e0f96852cf",
    "tarball": "http://registry.npmjs.org/redis-graph/-/redis-graph-0.2.3.tgz"
  },
  "_from": "redis-graph@*",
  "_npmVersion": "1.2.10",
  "_npmUser": {
    "name": "tblobaum",
    "email": "tblobaum@gmail.com"
  },
  "maintainers": [
    {
      "name": "tblobaum",
      "email": "tblobaum@gmail.com"
    }
  ],
  "_shasum": "79b03e7290acaafd1448e258491a14e0f96852cf",
  "_resolved": "https://registry.npmjs.org/redis-graph/-/redis-graph-0.2.3.tgz"
}
