var MultiSet = require('redis-multi-set')
  , Graph = require('redis-graph')
  , multiSet
  , db

module.exports = function (id) {
  if (!id) throw new Error('id is required')
  return new Acl(id)
}

module.exports.setClient = function (client) {
  db = module.exports.db = client
  multiSet = MultiSet(client)
  Graph.setClient(client)
}

function Acl (id) { 
  this.mode = {
      add : multiSet.add.bind(multiSet, id)
    , get : multiSet.get.bind(multiSet, id)
    , remove : multiSet.remove.bind(multiSet, id)
    , delete : multiSet.delete.bind(multiSet, id)
  }
  this.id = Graph(id)
}

/**
 * Check if `this.id` is the same as `id`
 *
 * @param {String} id
 * @param {Function} callback
 * @return {Boolean}
 * @api private
 */

Acl.prototype.is = function (id, cb) {
  if (String(this.id) === String(id)) return cb(null, true)
  // else if (String(this.id) === String(owner)) return cb(null, true)
  else return cb(null, false)
}

/**
 * Check if `id` can be accessed with `this.id`
 *
 * @param {String} id
 * @param {Function} callback
 * @return {Boolean}
 * @api private
 */

Acl.prototype.hasAccess = function (id, cb) {
  this.id.membership.all(function (error, array) {
    if (error) {
      return cb(error)
    }
    else if (contains(array, String(id))) {
      return cb(null, true)
    }
    else {
      return cb(null, false)
    }
  })
}

/**
 * Find the roles `this.id` can take with `id` 
 *
 * @param {String} id
 * @param {Function} callback
 * @return {Array}
 * @api private
 */

Acl.prototype.roles = function (id, cb) {
  var me = this
    , roles = [ 'others' ]

  me.hasAccess(id, function (error, boolean) {
    if (boolean) {
      roles.push('group') 
    }
    me.is(id, function (err, bool) {
      if (bool) {
        roles.push('owner') 
      }
      return cb(null, roles)
    })
  })
}

/**
 * Test if `this.id` can perform `ability` on `id`
 *
 * @param {String} ability
 * @param {String} id
 * @param {Function} callback
 * @return {Array}
 * @api public
 */

Acl.prototype.can = function (ability, id, cb) {
  console.log(String(this.id), 'can', ability, String(id))
  var attempts

  this.roles(id, function (error, roles) {
    // roles is something like:
    // [ 'others', 'group', 'owner' ]

    attempts = roles.map(function (role) {
      return [ role, ability ]
    })
    // attempts is something like:
    // [ 
    //     [ 'owner', 'read' ]
    //   , [ 'group', 'read' ] 
    //   , [ 'others', 'read' ] 
    // ]

    multiSet.get(id, function (err, modes) {
      // modes is something like:
      // [ 
      //     [ 'owner', 'read' ]
      //   , [ 'owner', 'write' ]
      //   , [ 'group', 'read' ] 
      //   , [ 'group', 'write' ] 
      //   , [ 'others', 'read' ] 
      //   , [ 'others', 'write' ] 
      // ]

      for (var i = 0; i < attempts.length; i++) {
        // does `modes` contain `[ 'group', 'read' ]` etc.

        if (contains(modes, attempts[i])) {
          return cb(null, true)
        }
      }

      return cb(null, false)

    })
  })
}

function contains (array, val) {
  var retval = false
  array.forEach(function (item) {
    retval = retval || item.toString() === val.toString()
  })
  return retval
}

// Acl.prototype.everything = function (callback) {
//   var multi = db.multi()

//   db.keys('*', function (error, keys) {
//     if (error) return callback(error)
//     if (!keys.length) return callback(null, keys)

//     keys.forEach(function (key) {
//       multi.smembers(key)
//     })

//     multi.exec(function (error, replies) {
//       return callback(error, [ makeHash(keys, replies) ])
//     })
//   })

// }
