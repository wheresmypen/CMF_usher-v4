var test = require('tap').test
var client = require('redis').createClient()
var Acl = require('../')

Acl.setClient(client)

var tom = Acl('tom')
var anon = Acl('anon')
var note1 = Acl('note1')

test('setClient', function (t) {
  t.type(Acl.db, 'object', 'Acl.db')
  t.end()
})

test('add modes to user', function (t) {
  t.plan(3)
  tom.mode.add([ 
      [ 'owner', 'read' ]
    , [ 'owner', 'write' ]
    , [ 'group', 'read' ]
  ], function (err, res) { t.notok(err, 'error should be falsy') })
  note1.mode.add([ 
      [ 'owner', 'read' ]
    , [ 'owner', 'write' ]
    , [ 'group', 'read' ]
  ], function (err, res) { t.notok(err, 'error should be falsy') })
  tom.id.membership.add('note1', function (err) {
    t.notok(err, 'error should be falsy')
  })
})

test('reading a note', function (t) {
  t.plan(12)
  note1.can('read', 'note1', function (err, bool) {
    t.notok(err, 'error should be falsy')
    t.deepEqual(bool, true, 'note1 should be able to read note1')
  })
  note1.can('write', 'note1', function (err, bool) {
    t.notok(err, 'error should be falsy')
    t.deepEqual(bool, true, 'note1 should be able to write note1')
  })
  tom.can('read', 'note1', function (err, bool) {
    t.notok(err, 'error should be falsy')
    t.deepEqual(bool, true, 'tom should be able to read note1')
  })
  tom.can('write', 'note1', function (err, bool) {
    t.notok(err, 'error should be falsy')
    t.deepEqual(bool, false, 'tom should NOT be able to write note1')
  })
  anon.can('read', 'note1', function (err, bool) {
    t.notok(err, 'error should be falsy')
    t.deepEqual(bool, false, 'anon should NOT be able to read note1')
  })
  anon.can('write', 'note1', function (err, bool) {
    t.notok(err, 'error should be falsy')
    t.deepEqual(bool, false, 'anon should NOT be able to write note1')
  })
})

test('cleanup', function (t) {
  t.plan(4)
  tom.mode.delete(function (err, res) {
    t.notok(err, 'error should be falsy')
  })
  tom.id.delete(function (err, res) {
    t.notok(err, 'error should be falsy')
  })
  note1.mode.delete(function (err, res) {
    t.notok(err, 'error should be falsy')
  })
  note1.id.delete(function (err, res) {
    t.notok(err, 'error should be falsy')
  })
})

test('close redis connection', function (t) {
  client.end()
  t.end()
})
